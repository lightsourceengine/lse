/*
 * Copyright (c) 2022 Light Source Software, LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

// ////////////////////////////////////////////////////////////////////////////
// AUTO-GENERATED - DO NOT EDIT
// clang-format off
// ////////////////////////////////////////////////////////////////////////////

#include <lse_test.h>

{{#tests}}
{{#if this.beforeEach}}extern void* {{this.beforeEach}}(const MunitParameter params[], void* user_data);{{/if}}
{{#if this.afterEach}}extern void {{this.afterEach}}(void* fixture);{{/if}}
{{#testCases}}
extern const char* {{this}}_description;
extern MunitResult {{this}}(const MunitParameter params[], void* fixture);
{{/testCases}}

{{/tests}}
#define STRINGIFY(SYM) #SYM

MunitSuite lse_test_runner_suite_init() {
  MunitSuite* suites = (MunitSuite*)calloc({{tests.length}} + 1, sizeof(MunitSuite));
  size_t suites_push_index = 0;

{{#tests}}
{{#if this.testCases.length}}
  lse_test_info tests_{{@index}} [] = {
  {{#testCases}}
      { .name = STRINGIFY({{this}}), .desc = {{this}}_description, .test = {{this}} },
  {{/testCases}}
  };
  MunitTestSetup tests_{{@index}}_before_each = {{#if this.beforeEach}}&{{this.beforeEach}}{{else}}NULL{{/if}};
  MunitTestTearDown tests_{{@index}}_after_each = {{#if this.afterEach}}&{{this.afterEach}}{{else}}NULL{{/if}};

  suites[suites_push_index++] = lse_test_suite_init(tests_{{@index}}, sizeof(tests_{{@index}}) / sizeof(tests_{{@index}}[0]), tests_{{@index}}_before_each, tests_{{@index}}_after_each);

{{/if}}
{{/tests}}
  return (MunitSuite) {
      .prefix = "",
      .tests = NULL,
      .suites = suites,
      .iterations = 1,
      .options = MUNIT_SUITE_OPTION_NONE
  };
}

void lse_test_runner_suite_free(MunitSuite* suite) {
  for (size_t i = 0; suite->suites[i].tests != NULL; i++) {
    lse_test_suite_free(&suite->suites[i]);
  }

  free(suite->suites);
  suite->suites = NULL;
}