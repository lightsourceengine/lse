{
  /*
   * Style Properties
   *
   * The key names are the style property names that will appear in javascript. In C, the names will conform to the
   * code style conventions.
   *
   * The values contain the metadata of the style property. 'type' can be string, number, transform, filter or an
   * type name defined in the types field of this document. 'layout' is a boolean that marks whether a style property
   * is managed by Yoga layout. 'constraint' is a check applied before a property value is assigned at runtime. 'units'
   * is an array of units that are acceptable as property values.
   *
   * The default 'type' is 'number'. The default 'layout' is false.
   */
  properties: {
    // Yoga Layout Style Properties
    alignItems: {
      type: 'align',
      layout: true
    },
    alignContent: {
      type: 'align',
      layout: true
    },
    alignSelf: {
      type: 'align',
      layout: true
    },
    border: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    borderBottom: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    borderLeft: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    borderRight: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    borderTop: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    bottom: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    display: {
      type: 'display',
      layout: true
    },
    flex: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    flexBasis: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    flexDirection: {
      type: 'flex-direction',
      layout: true
    },
    flexGrow: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    flexShrink: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    flexWrap: {
      type: 'wrap',
      layout: true
    },
    height: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    justifyContent: {
      type: 'justify',
      layout: true
    },
    left: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    margin: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    marginBottom: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    marginLeft: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    marginRight: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    marginTop: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    maxHeight: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent'
      ]
    },
    maxWidth: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent'
      ]
    },
    minHeight: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent'
      ]
    },
    minWidth: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent'
      ]
    },
    overflow: {
      type: 'overflow',
      layout: true
    },
    padding: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    paddingBottom: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    paddingLeft: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    paddingRight: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    paddingTop: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    position: {
      type: 'position',
      layout: true
    },
    right: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    top: {
      layout: true,
      constraint: 'any',
      units: [
        'pixelish',
        'percent'
      ]
    },
    width: {
      layout: true,
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    // Light Source Engine Style Properties
    // backgroundClip: { type: 'enum', enumType: 'background-clip' },
    backgroundColor: {
      type: 'color'
    },
    backgroundHeight: {
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    backgroundImage: {
      type: 'string'
    },
    backgroundPositionX: {
      constraint: 'xanchor',
      units: [
        'pixelish',
        'percent',
        'auto',
        'anchor'
      ]
    },
    backgroundPositionY: {
      constraint: 'yanchor',
      units: [
        'pixelish',
        'percent',
        'auto',
        'anchor'
      ]
    },
    // backgroundRepeat: { type: 'enum', enumType: 'background-repeat' },
    backgroundSize: {
      type: 'background-size'
    },
    backgroundWidth: {
      constraint: 'gte0',
      units: [
        'pixelish',
        'percent',
        'auto'
      ]
    },
    borderColor: {
      type: 'color'
    },
    borderRadius: {
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    borderRadiusTopLeft: {
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    borderRadiusTopRight: {
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    borderRadiusBottomLeft: {
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    borderRadiusBottomRight: {
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    color: {
      type: 'color'
    },
    filter: {
      type: 'filter'
    },
    fontFamily: {
      type: 'string'
    },
    fontKerning: {
      type: 'font-kerning'
    },
    fontSize: {
      constraint: 'gte0',
      units: [
        'pixelish'
      ]
    },
    fontStyle: {
      type: 'font-style'
    },
    fontWeight: {
      type: 'font-weight'
    },
    // lineHeight: { constraint: 'gte0', units: ['pixelish', 'percent'] },
    maxLines: {
      constraint: 'gte0',
      units: [
        'px'
      ]
    },
    objectFit: {
      type: 'object-fit'
    },
    objectPositionX: {
      constraint: 'xanchor',
      units: [
        'pixelish',
        'percent',
        'auto',
        'anchor'
      ]
    },
    objectPositionY: {
      constraint: 'yanchor',
      units: [
        'pixelish',
        'percent',
        'auto',
        'anchor'
      ]
    },
    opacity: {
      constraint: 'opacity',
      units: [
        'px',
        'percent'
      ]
    },
    overflowWrap: {
      type: 'overflow-wrap'
    },
    textAlign: {
      type: 'text-align'
    },
    textOverflow: {
      type: 'text-overflow'
    },
    textTransform: {
      type: 'text-transform'
    },
    transform: {
      type: 'transform'
    },
    transformOriginX: {
      constraint: 'xanchor',
      units: [
        'pixelish',
        'percent',
        'auto',
        'anchor'
      ]
    },
    transformOriginY: {
      constraint: 'yanchor',
      units: [
        'pixelish',
        'percent',
        'auto',
        'anchor'
      ]
    },
    'whiteSpace': {
      type: 'white-space'
    },
//    zOrder: {
//      constraint: 'gte0',
//      units: [
//        'px'
//      ]
//    },
  },
  /*
   * Enumeration types used by style properties.
   *
   * The enum type is the key name. The key name will be used by property definitions in the properties field of
   * this JSON document. In C++ and js, the names will be changed to match the code style of the language.
   *
   * The value is an array of text names for the enumeration. The first entry is the default value for the enum.
   *
   * The array value is a shorthand. The value gets expanded to an object, { values: [...] }, to accommodate enums
   * with additional metadata, such as unit.
   */
  types: {
    align: [
      'auto',
      'flex-start',
      'center',
      'flex-end',
      'stretch',
      'baseline',
      'space-between',
      'space-around'
    ],
    display: [
      'flex',
      'none'
    ],
    'flex-direction': [
      'column',
      'column-reverse',
      'row',
      'row-reverse'
    ],
    overflow: [
      'visible',
      'hidden',
      'scroll'
    ],
    'overflow-wrap': [
      'normal',
      'break-word'
    ],
    position: [
      'static',
      'relative',
      'absolute'
    ],
    wrap: [
      'no-wrap',
      'wrap',
      'wrap-reverse'
    ],
    justify: [
      'flex-start',
      'center',
      'flex-end',
      'space-between',
      'space-around',
      'space-evenly'
    ],
    'font-style': [
      'normal',
      'italic',
      'oblique'
    ],
    'font-weight': [
      'normal',
      'bold'
    ],
    'text-overflow': [
      'none',
      'clip',
      'ellipsis'
    ],
    'text-align': [
      'left',
      'center',
      'right'
    ],
    'object-fit': [
      'fill',
      'contain',
      'cover',
      'none',
      'scale-down'
    ],
    'background-clip': [
      'border-box',
      'padding-box',
      'content-box'
    ],
    'background-size': [
      'none',
      'cover',
      'contain'
    ],
    'background-repeat': [
      'off',
      'xy',
      'x',
      'y'
    ],
    'text-transform': [
      'none',
      'uppercase',
      'lowercase'
    ],
    'white-space': [
      'normal',
      'pre',
      'no-wrap'
    ],
    'font-kerning': [
      'normal',
      'none'
    ],
    anchor: [
      'top',
      'right',
      'bottom',
      'left',
      'center'
    ],
    unit: {
      values: [
        'undefined',
        'px',
        'pt',
        'percent',
        'auto',
        'anchor',
        'rem',
        'vmin',
        'vmax',
        'vw',
        'vh',
        'deg',
        'rad',
        'grad',
        'turn'
      ],
      postFix: [
        null,
        'px',
        'pt',
        '%',
        null,
        null,
        'rem',
        'vmin',
        'vmax',
        'vw',
        'vh',
        'deg',
        'rad',
        'grad',
        'turn'
      ]
    }
  }
}
